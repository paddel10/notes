{"version":3,"sources":["app.js","controllers/appcontroller.js","controllers/notecontroller.js","controllers/notescontroller.js","directives/autofocus.js","directives/editor.js","directives/tooltip.js","filters/and.js","filters/noteTitle.js","filters/wordCount.js","services/debounce.js","services/is.js","services/notesmodel.js","services/savequeue.js","services/urlFinder.js"],"names":["angular","$","requestToken","SimpleMDE","undefined","app","module","config","$provide","$routeProvider","RestangularProvider","$httpProvider","$windowProvider","defaults","headers","common","requesttoken","value","saveInterval","when","templateUrl","controller","resolve","note","$route","$q","is","Restangular","deferred","defer","noteId","current","params","loading","one","get","then","reject","promise","otherwise","redirectTo","baseUrl","OC","generateUrl","setBaseUrl","run","$rootScope","$location","NotesModel","attr","filePath","$on","notes","getAll","length","sorted","sort","a","b","modified","path","id","$scope","init","lastViewedNote","errorMessage","Notification","showTemporary","search","$routeParams","SaveQueue","debounce","$document","updateIfExists","isSaving","isManualSaving","updateTitle","title","content","split","t","onEdit","unsaved","autoSave","add","manualSave","error","addManual","unbind","bind","event","ctrlKey","metaKey","String","fromCharCode","which","toLowerCase","preventDefault","toggleDistractionFree","launchIntoFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","document","mozCancelFullScreen","webkitExitFullscreen","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","getElementById","$window","route","categories","folderSelectorOpen","filterCategory","filterFavorite","strCategories","strUncategorized","notesResource","all","getList","addAll","customGET","create","post","remove","$emit","toggleFavorite","customPUT","favorite","toggleFolderSelector","setFilter","category","noteFilter","startsWith","onbeforeunload","i","directive","restrict","link","scope","focus","$timeout","urlFinder","simplemde","spellChecker","autoDownloadFontAwesome","toolbar","status","forceSync","editorElement","codemirror","getWrapperElement","on","$apply","url","this","isDefined","window","open","tooltip","container","filter","$filter","items","searchString","searchValues","filtered","trim","replace","wordCount","n","factory","func","delay","timeout","context","args","arguments","cancel","apply","notesIds","prototype","dialogs","alert","updated","push","splice","_queue","_flushLock","_manualSaveActive","_flush","keys","Object","self","requests","put","_noteUpdateRequest","_saveFailed","response","prev","next","text","jQuery","oc_requesttoken"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n/* jshint unused: false */\nvar app = angular.module('Notes', ['restangular', 'ngRoute']).\nconfig(function($provide, $routeProvider, RestangularProvider, $httpProvider,\n                $windowProvider) {\n    'use strict';\n\n    // Always send the CSRF token by default\n    $httpProvider.defaults.headers.common.requesttoken = requestToken;\n\n    // you have to use $provide inside the config method to provide a globally\n    // shared and injectable object\n    $provide.value('Constants', {\n        saveInterval: 5*1000  // miliseconds\n    });\n\n    // define your routes that that load templates into the ng-view\n    $routeProvider.when('/notes/:noteId', {\n        templateUrl: 'note.html',\n        controller: 'NoteController',\n        resolve: {\n            // $routeParams does not work inside resolve so use $route\n            // note is the name of the argument that will be injected into the\n            // controller\n            /* @ngInject */\n            note: function ($route, $q, is, Restangular) {\n\n                var deferred = $q.defer();\n                var noteId = $route.current.params.noteId;\n                is.loading = true;\n\n                Restangular.one('notes', noteId).get().then(function (note) {\n                    is.loading = false;\n                    deferred.resolve(note);\n                }, function () {\n                    is.loading = false;\n                    deferred.reject();\n                });\n\n                return deferred.promise;\n            }\n        }\n    }).otherwise({\n        redirectTo: '/'\n    });\n\n    var baseUrl = OC.generateUrl('/apps/notes');\n    RestangularProvider.setBaseUrl(baseUrl);\n\n\n\n}).run(function ($rootScope, $location, NotesModel) {\n    'use strict';\n\n    $('link[rel=\"shortcut icon\"]').attr(\n\t\t    'href',\n\t\t    OC.filePath('notes', 'img', 'favicon.png')\n    );\n\n    // handle route errors\n    $rootScope.$on('$routeChangeError', function () {\n        var notes = NotesModel.getAll();\n\n        // route change error should redirect to the latest note if possible\n        if (notes.length > 0) {\n            var sorted = notes.sort(function (a, b) {\n                if(a.modified > b.modified) {\n                    return 1;\n                } else if(a.modified < b.modified) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            });\n\n            var note = notes[sorted.length-1];\n            $location.path('/notes/' + note.id);\n        } else {\n            $location.path('/');\n        }\n    });\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('AppController', function ($scope, $location, is) {\n    'use strict';\n\n    $scope.is = is;\n\n    $scope.init = function (lastViewedNote,errorMessage) {\n\n\n        if(lastViewedNote !== 0) {\n            $location.path('/notes/' + lastViewedNote);\n        }\n        if(errorMessage !==0){\n            OC.Notification.showTemporary(errorMessage);\n        }\n    };\n\n    $scope.search = '';\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.controller('NoteController', function($routeParams, $scope, NotesModel,\n                                          SaveQueue, note, debounce,\n                                          $document) {\n    'use strict';\n\n    NotesModel.updateIfExists(note);\n\n    $scope.note = NotesModel.get($routeParams.noteId);\n\n    $scope.isSaving = function () {\n        return SaveQueue.isSaving();\n    };\n    $scope.isManualSaving = function () {\n        return SaveQueue.isManualSaving();\n    };\n\n    $scope.updateTitle = function () {\n        $scope.note.title = $scope.note.content.split('\\n')[0] ||\n            t('notes', 'New note');\n    };\n\n    $scope.onEdit = function() {\n        var note = $scope.note;\n        note.unsaved = true;\n        $scope.autoSave(note);\n    };\n\n    $scope.autoSave = debounce(function(note) {\n        SaveQueue.add(note);\n    }, 1000);\n\n    $scope.manualSave = function() {\n        var note = $scope.note;\n        note.error = false;\n        SaveQueue.addManual(note);\n    };\n\n    $document.unbind('keypress.notes.save');\n    $document.bind('keypress.notes.save', function(event) {\n        if(event.ctrlKey || event.metaKey) {\n            switch(String.fromCharCode(event.which).toLowerCase()) {\n                case 's':\n                    event.preventDefault();\n                    $scope.manualSave();\n                    break;\n            }\n        }\n    });\n\n    $scope.toggleDistractionFree = function() {\n        function launchIntoFullscreen(element) {\n            if(element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if(element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if(element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if(element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n\n        function exitFullscreen() {\n            if(document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if(document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if(document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            }\n        }\n\n        if(document.fullscreenElement ||\n           document.mozFullScreenElement ||\n           document.webkitFullscreenElement) {\n            exitFullscreen();\n        } else {\n            launchIntoFullscreen(document.getElementById('app-content'));\n        }\n    };\n\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// This is available by using ng-controller=\"NotesController\" in your HTML\napp.controller('NotesController', function($routeParams, $scope, $location,\n                                           Restangular, NotesModel, $window) {\n    'use strict';\n\n    $scope.route = $routeParams;\n    $scope.notes = NotesModel.getAll();\n    $scope.categories = {};\n\n    $scope.folderSelectorOpen = false;\n    $scope.filterCategory = null;\n    $scope.filterFavorite = false;\n\n    $scope.strCategories = t('notes', 'Categories');\n    $scope.strUncategorized = t('notes', 'Uncategorized');\n\n    var notesResource = Restangular.all('notes');\n\n    // initial request for getting all notes\n    notesResource.getList().then(function (notes) {\n        NotesModel.addAll(notes);\n    });\n\n    // initial request for getting all categories\n    notesResource.customGET('categories').then(function (categories) {\n        $scope.categories = categories;\n    });\n\n    $scope.create = function () {\n        notesResource.post().then(function (note) {\n            NotesModel.add(note);\n            $location.path('/notes/' + note.id);\n        });\n    };\n\n    $scope.delete = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.remove().then(function () {\n            NotesModel.remove(noteId);\n            $scope.$emit('$routeChangeError');\n        });\n    };\n\n    $scope.toggleFavorite = function (noteId) {\n        var note = NotesModel.get(noteId);\n        note.customPUT({favorite: !note.favorite},\n            'favorite', {}, {}).then(function (favorite) {\n            note.favorite = favorite ? true : false;\n        });\n    };\n\n    $scope.toggleFolderSelector = function () {\n        $scope.folderSelectorOpen = !$scope.folderSelectorOpen;\n    };\n\n    $scope.setFilter = function (category, favorite) {\n        $scope.filterCategory = category;\n        $scope.filterFavorite = favorite;\n        $scope.folderSelectorOpen = false;\n    };\n\n    $scope.noteFilter = function (note) {\n        if($scope.filterFavorite && !note.favorite) {\n            return false;\n        }\n        if($scope.filterCategory!==null) {\n            return note.category===$scope.filterCategory || (note.category!==null && note.category.startsWith($scope.filterCategory+'/'));\n        }\n        return true;\n    };\n\n    $window.onbeforeunload = function() {\n        var notes = NotesModel.getAll();\n        for(var i=0; i<notes.length; i++) {\n            if(notes[i].unsaved) {\n                return t('notes', 'There are unsaved notes. Leaving ' +\n                                  'the page will discard all changes!');\n            }\n        }\n        return null;\n    };\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesAutofocus', function () {\n    'use strict';\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.focus();\n        }\n    };\n});\n","/*global SimpleMDE*/\napp.directive('editor', ['$timeout',\n                         'urlFinder',\n                         function ($timeout, urlFinder) {\n\t'use strict';\n\treturn {\n\t\trestrict: 'A',\n\t\tlink: function(scope, element) {\n\n\t\t\tvar simplemde = new SimpleMDE({\n\t\t\t\telement: element[0],\n\t\t\t\tspellChecker: false,\n\t\t\t\tautoDownloadFontAwesome: false,\n\t\t\t\ttoolbar: false,\n\t\t\t\tstatus: false,\n\t\t\t\tforceSync: true\n\t\t\t});\n\t\t\tvar editorElement = $(simplemde.codemirror.getWrapperElement());\n\n\t\t\tsimplemde.value(scope.note.content);\n\n\t\t\tsimplemde.codemirror.on('change', function() {\n\t\t\t\t$timeout(function() {\n\t\t\t\t\tscope.$apply(function () {\n\t\t\t\t\t\tscope.note.content = simplemde.value();\n\t\t\t\t\t\tscope.onEdit();\n\t\t\t\t\t\tscope.updateTitle();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\n\t\t\teditorElement.on('click', '.cm-link, .cm-url', function(event) {\n\t\t\t\tif(event.ctrlKey) {\n\t\t\t\t\tvar url = urlFinder(this);\n\t\t\t\t\tif(angular.isDefined(url)) {\n\t\t\t\t\t\twindow.open(url, '_blank');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.directive('notesTooltip', function () {\n    'use strict';\n\n    return {\n        restrict: 'A',\n        link: function (scope, element) {\n            element.tooltip({'container': 'body'});\n\n            element.on('$destroy', function() {\n                element.tooltip('hide');\n            });\n        }\n    };\n});\n","/**\n * filter by multiple words (AND operation)\n */\napp.filter('and', ['$filter', function ($filter) {\n\t'use strict';\n\treturn function (items, searchString) {\n\t\tvar searchValues = searchString.split(' ');\n\t\tvar filtered = items;\n\t\tfor(var i in searchValues) {\n\t\t\tfiltered = $filter('filter')(filtered, searchValues[i]);\n\t\t}\n\t\treturn filtered;\n\t};\n}]);\n","/**\n * removes whitespaces and leading #\n */\napp.filter('noteTitle', function () {\n\t'use strict';\n\treturn function (value) {\n        \tvalue = value.split('\\n')[0] || 'newNote';\n\t\treturn value.trim().replace(/^#+/g, '');\n\t};\n});\n","app.filter('wordCount', function () {\n\t'use strict';\n\treturn function (value) {\n\t\tif (value && (typeof value === 'string')) {\n\t\t\tvar wordCount = value.split(/\\s+/).filter(\n\t\t\t\t// only count words containing\n\t\t\t\t// at least one alphanumeric character\n\t\t\t\tfunction(value) {\n\t\t\t\t\treturn value.search(/[A-Za-z0-9]/) !== -1;\n\t\t\t\t}\n\t\t\t).length;\n\t\t\treturn window.n('notes', '%n word', '%n words', wordCount);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('debounce', ['$timeout', function($timeout) {\n\t'use strict';\n\n\treturn function debounce(func, delay) {\n\t\tvar timeout;\n\n\t\treturn function() {\n\t\t\tvar context = this, args = arguments;\n\n\t\t\tif(timeout) {\n\t\t\t\t$timeout.cancel(timeout);\n\t\t\t}\n\t\t\ttimeout = $timeout(function() {\n\t\t\t\tfunc.apply(context, args);\n\t\t\t}, delay);\n\t\t};\n\t};\n}]);\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('is', function () {\n    'use strict';\n\n    return {\n        loading: false\n    };\n});","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// take care of fileconflicts by appending a number\napp.factory('NotesModel', function () {\n    'use strict';\n\n    var NotesModel = function () {\n        this.notes = [];\n        this.notesIds = {};\n    };\n\n    NotesModel.prototype = {\n        addAll: function (notes) {\n            for(var i=0; i<notes.length; i+=1) {\n                this.add(notes[i]);\n            }\n        },\n        add: function(note) {\n            this.updateIfExists(note);\n        },\n        getAll: function () {\n            return this.notes;\n        },\n        get: function (id) {\n            if(this.notesIds[id].error) {\n                OC.dialogs.alert(\n                    this.notesIds[id].errorMessage,\n                    t('notes','An error occurred!')\n                );\n                return false;\n            }\n            return this.notesIds[id];\n        },\n        updateIfExists: function(updated) {\n            var note = this.notesIds[updated.id];\n            if(angular.isDefined(note)) {\n                note.title = updated.title;\n                note.modified = updated.modified;\n                note.content = updated.content;\n                note.favorite = updated.favorite;\n            } else {\n                this.notes.push(updated);\n                this.notesIds[updated.id] = updated;\n            }\n        },\n        remove: function (id) {\n            for(var i=0; i<this.notes.length; i+=1) {\n                var note = this.notes[i];\n                if(note.id === id) {\n                    this.notes.splice(i, 1);\n                    delete this.notesIds[id];\n                    break;\n                }\n            }\n        }\n    };\n\n    return new NotesModel();\n});\n","/**\n * Copyright (c) 2013, Bernhard Posselt <dev@bernhard-posselt.com>\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\napp.factory('SaveQueue', function($q) {\n    'use strict';\n\n    var SaveQueue = function () {\n        this._queue = {};\n        this._flushLock = false;\n        this._manualSaveActive = false;\n    };\n\n    SaveQueue.prototype = {\n        add: function (note) {\n            this._queue[note.id] = note;\n            this._flush();\n        },\n        addManual: function (note) {\n            this._manualSaveActive = true;\n            this.add(note);\n        },\n        _flush: function () {\n            // if there are no changes dont execute the requests\n            var keys = Object.keys(this._queue);\n            if(keys.length === 0 || this._flushLock) {\n                return;\n            } else {\n                this._flushLock = true;\n            }\n\n            var self = this;\n            var requests = [];\n\n            // iterate over updated objects and run an update request for\n            // each one of them\n            for(var i=0; i<keys.length; i+=1) {\n                var note = this._queue[keys[i]];\n                // if the update finished, update the modified and title\n                // attributes on the note\n                requests.push(note.put().then(\n                    this._noteUpdateRequest.bind(null, note))\n                    .catch(this._saveFailed.bind(null, note))\n                );\n            }\n            this._queue = {};\n\n            // if all update requests are completed, run the flush\n            // again to update the next batch of queued notes\n            $q.all(requests).then(function () {\n                self._flushLock = false;\n                self._flush();\n                self._manualSaveActive = false;\n            });\n        },\n        _noteUpdateRequest: function (note, response) {\n            note.error = false;\n            note.title = response.title;\n            note.modified = response.modified;\n            if(response.content === note.content) {\n                note.unsaved = false;\n            }\n        },\n        _saveFailed: function (note) {\n            note.error = true;\n        },\n        isSaving: function () {\n            return this._flushLock;\n        },\n        isManualSaving: function () {\n            return this._manualSaveActive;\n        },\n    };\n\n    return new SaveQueue();\n});\n","/**\n * Copyright (c) 2016, Hendrik Leppelsack\n * This file is licensed under the Affero General Public License version 3 or\n * later.\n * See the COPYING file.\n */\n\n// finds the url which should be opened when a link is clicked\n// example: '[hello](http://example.com)'\napp.factory('urlFinder', [function() {\n\t'use strict';\n\n\treturn function urlFinder(element) {\n\t\telement = $(element);\n\n\t\t// special case: click on ')'\n\t\tif(element.is('.cm-url.cm-formatting')) {\n\t\t\tif(element.prev().length !== 0) {\n\t\t\t\telement = element.prev();\n\t\t\t}\n\t\t}\n\n\t\t// skip '[hello]'\n\t\twhile(element.is('.cm-link')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// skip '('\n\t\twhile(element.is('.cm-url.cm-formatting')) {\n\t\t\telement = element.next();\n\t\t}\n\n\t\t// check if we actually have a cm-url\n\t\tif(element.is('.cm-url:not(.cm-formatting)')) {\n\t\t\treturn element.text();\n\t\t}\n\n\t\treturn undefined;\n\t};\n}]);\n"]}